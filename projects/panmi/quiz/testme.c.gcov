        -:    0:Source:testme.c
        -:    0:Graph:./testme.gcno
        -:    0:Data:./testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 86819 returned 100% blocks executed 100%
    86819:    6:char inputChar()
        -:    7:{
        -:    8:   
        -:    9:    //Generate random number between 32 and 125 to cover all the possible if statements in testme()
        -:   10:    //num = (rand() % (upper â€“ lower + 1)) + lower
    86819:   11:    char randomChar = (rand()%(125 - 32 + 1)) + 32;
call    0 returned 100%
    86819:   12:    return randomChar;
        -:   13:}
        -:   14:
function inputString called 86819 returned 100% blocks executed 100%
    86819:   15:char *inputString()
        -:   16:{
        -:   17:    // TODO: rewrite this function
        -:   18:    static char s[6];		//creating a string
    86819:   19:  	int i = 0;
        -:   20:  
        -:   21:  	//Possible input chars are ranging from 97 - a to 122 - z, closer range is 101 - e to 116 - t
   607733:   22:  	while (i < 5) 
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   23:  	{
   434095:   24:  		s[i] = (rand()%(116 - 101 + 1)) + 101;
call    0 returned 100%
   434095:   25:  		i++;
        -:   26:  	}
        -:   27:
    86819:   28:    return s;
        -:   29:    
        -:   30:}
        -:   31:
function testme called 1 returned 0% blocks executed 100%
        1:   32:void testme()
        -:   33:{
        1:   34:  int tcCount = 0;
        -:   35:  char *s;
        -:   36:  char c;
        1:   37:  int state = 0;
        -:   38:  while (1)
        -:   39:  {
    86819:   40:    tcCount++;
    86819:   41:    c = inputChar();
call    0 returned 100%
    86819:   42:    s = inputString();
call    0 returned 100%
    86819:   43:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   44:
    86819:   45:    if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   46:    if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   47:    if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   48:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   49:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   50:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   51:    if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   52:    if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   53:    if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    86819:   54:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      359:   55:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        3:   56:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   57:       && state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   58:    {
        1:   59:      printf("error ");
call    0 returned 100%
        1:   60:      exit(200);
call    0 returned 0%
        -:   61:    }
    86818:   62:  }
        -:   63:}
        -:   64:
        -:   65:
function main called 1 returned 0% blocks executed 83%
        1:   66:int main(int argc, char *argv[])
        -:   67:{
        1:   68:    printf("in main ");
call    0 returned 100%
        1:   69:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   70:    testme();
call    0 returned 0%
    #####:   71:    return 0;
        -:   72:}
